#!/usr/bin/env ruby

require 'pathname'
Root ||= Pathname.new(File.dirname(__FILE__)).expand_path
Dir.chdir Root.join('..').to_s

require "bundler/setup"
require "iodine/http"


# ~/ruby/wrk/wrk -c400 -d10 -t12 http://localhost:3000/


# Iodine.ssl = true
# Iodine.treads = 8
# Iodine.protocol.on_http do |req, res|
# 	res.session[:count] ||= 0
# 	res.session[:count] += 1
# 	res << "Visits: #{res.session[:count]}\n\nRequest object:\n\n#{req.to_s}"
# end

# Iodine.processes = 4

HELLO = "Hello World!"
Iodine::Http.on_http { HELLO }

Iodine.logger = nil


class WSChatServer < Iodine::Http::WebsocketHandler
  def on_open
     @nickname = request.params[:nickname] || "unknown"
     broadcast "#{@nickname} has joined the chat!"
     write "Welcome #{@nickname}, you have joined the chat!"
  end
  def on_message data
     broadcast "#{@nickname} >> #{data}"
     write ">> #{data}"
  end
  def on_broadcast data
     write data
  end
  def on_close
     broadcast "#{@nickname} has left the chat!"
  end
end

Iodine::Http.on_websocket WSChatServer

Iodine::Http.http2 = true

Process.fork do

  Iodine.ssl = true
	Iodine.port = 3030
	Iodine::Http.on_http do |req, res|
    if req.path == '/stream'
      res.stream_async { sleep 0.2; res << "I was sleeping..."}
      next
    end
    if req.path == '/stream2'
      res.stream_async { sleep 2; res << "I was sleeping..."}
      next
    end
    res << "Old session visits: #{res.session_old[:count]}\n\n" if res.session_old
		res.session[:count] ||= 0
		res.session[:count] += 1
    res['content-type'] = 'text/plain'
    res.cookies['testing'] = !res.cookies['testing']
    res << "Visits: #{res.session[:count]}\n\nRequest object:\n\n#{req.to_s}"
    # puts "Setting :testing cookie was #{ res.cookies[:testing] }, setting to: #{res.cookies[:testing] = !res.cookies[:testing]}"
    # puts "Setting 'testing' cookie was #{ res.cookies['testing'] }, setting to: #{res.cookies['testing'] = !res.cookies['testing']}"
	end

end
