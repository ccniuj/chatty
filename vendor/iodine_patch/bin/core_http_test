#!/usr/bin/env ruby

require 'pathname'
Root ||= Pathname.new(File.dirname(__FILE__)).expand_path
Dir.chdir Root.join('..').to_s

require "bundler/setup"
require "iodine"
require 'stringio'

# ab -n 10000 -c 200 -k http://127.0.0.1:3000/
# ab -n 10000 -c 200 -k http://localhost:3000/
# ~/ruby/wrk/wrk -c400 -d10 -t12 http://localhost:3000/

class MiniServer < Iodine::Protocol
	def on_open
		@headers = {}
		set_timeout 1
	end

	def on_message data
		data = ::StringIO.new data
		l = nil
		headers = @headers
		while (l = data.gets)
			unless l =~ /^[\r]?\n/
				if l.include? ':'
					l = l.strip.downcase.split(':', 2)
					headers[l[0]] = l[1]
				else
					headers[:method], headers[:query], headers[:version] = l.strip.split(/[\s]+/, 3)
				end
				next
			end
			if headers['connection'] =~ /keep/i || headers[:version] =~ /1\.1/
				write "HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 12\r\nConnection: keep-alive\r\nKeep-Alive: 5\r\n\r\nhello world\n"
			else
				write "HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 12\r\nConnection: close\r\n\r\nhello world\n"
				close
			end
			headers.clear
		end
	end

end

Iodine.threads = 1
# Iodine.ssl = 1
Iodine.protocol = MiniServer


